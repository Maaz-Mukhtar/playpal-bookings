// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  name             String?
  image            String?
  phone            String?
  skillLevel       SkillLevel @default(BEGINNER)
  subscriptionTier SubscriptionTier @default(FREE)
  emailVerified    DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  bookings         Booking[]
  reviews          Review[]
  partnerRequests  PartnerRequest[]
  accounts         Account[]
  sessions         Session[]
  
  @@map("users")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Venue {
  id          String  @id @default(cuid())
  name        String
  address     String
  latitude    Decimal?
  longitude   Decimal?
  contactInfo Json?
  amenities   Json?
  pricingRules Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  courts      Court[]
  
  @@map("venues")
}

model Court {
  id          String    @id @default(cuid())
  venueId     String
  name        String
  courtType   CourtType @default(OUTDOOR)
  surfaceType String?
  hourlyRate  Decimal
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  venue       Venue     @relation(fields: [venueId], references: [id])
  bookings    Booking[]
  
  @@map("courts")
}

model Booking {
  id          String        @id @default(cuid())
  courtId     String
  userId      String
  startTime   DateTime
  endTime     DateTime
  status      BookingStatus @default(PENDING)
  totalAmount Decimal
  paymentId   String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  court       Court         @relation(fields: [courtId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
  
  @@map("bookings")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  venueId   String?
  rating    Int      @default(5)
  comment   String?
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  
  @@map("reviews")
}

model PartnerRequest {
  id        String   @id @default(cuid())
  userId    String
  message   String?
  skillLevel SkillLevel?
  preferredTime DateTime?
  status    PartnerRequestStatus @default(OPEN)
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  
  @@map("partner_requests")
}

// Enums
enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum SubscriptionTier {
  FREE
  PREMIUM
}

enum CourtType {
  INDOOR
  OUTDOOR
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PartnerRequestStatus {
  OPEN
  MATCHED
  CLOSED
}
